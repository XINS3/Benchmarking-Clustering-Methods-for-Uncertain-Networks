# draw Figure 11: Expected modularity according to the different community strengths

from matplotlib.cm import get_cmap
import numpy as np 
import matplotlib.pyplot as plt
list_=[1,0.95,0.9,0.85,0.8,0.75,0.7,0.65,0.6,0.55,0.5,0.45,0.4,0.35,0.3,0.25,0.2,0.15,0.1,0.05]
list2=[0, 0.05, 0.1, 0.15, 0.2, 0.25, 0.3, 0.35, 0.4, 0.45, 0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 0.95, 1]
pkwik=[0.14472343045973193, 0.1226565619920408, 0.09877793920172823, 0.112966426954062, 0.08557790463065613, 0.10078222923070695, 0.07205078450945933, 0.0847238725868289, 0.06395225802556283, 0.06438576553624945, 0.06752230753012907, 0.057154355992225785, 0.06064070536392711, 0.061020549322218544, 0.06189884416157904, 0.05760034738905879, 0.05579014996552675, 0.06203508703551288, 0.05892416662155935, 0.058253472616646096, 0.06445442975077524] 
weilouvain=[0.8982831724997824, 0.8524725948617208, 0.7875005218347629, 0.7475430661498663, 0.6946937814207128, 0.6396755905092675, 0.597883074537757, 0.5454824063546514, 0.47558121689914534, 0.459866154262214, 0.4087846169133388, 0.378769363846619, 0.3651330135292945, 0.34661641771657203, 0.3646103462725332, 0.3447628285689839, 0.3405563549105525, 0.3473971636030611, 0.35720581662112466, 0.3401574305908607, 0.35011485371884554] 
mcp=[0.42195233916176234, 0.2846713080871197, 0.1714307770878375, 0.1100119642190625, 0.06972296753472615, 0.04674781756621974, 0.012222929123914724, -0.003594606487625163, -0.0226780767868422, 0.0008825360207990204, -0.0020704598887010873, -0.0001850897432936199, -0.006149458211641536, -0.0001462991710087586, -0.0005269497195944921, 0.003099998493967309, -0.0003010500032985194, -0.003978395367930824, 0.0017574271966401612, 0.0] 
acp=[0.8801223372860467, 0.42083649811836754, 0.3038877195134005, 0.17505106396332132, 0.12058077443584471, 0.10921513473339797, 0.08877259004333618, 0.03966928954717956, 0.022161265163481807, -0.045625847322990694, 0.012520386471954133, -0.014722451394400806, -0.0006341208172031699, -0.0010921148982075408, -0.0018401264773598347, 0.024675136678075683, 0.0004492080698323596, -0.0005280082330014021, -0.0006588342242420386, -0.0002733106396002996, -0.009220055851033372]
bayes=[0.8237564945399003, 0.7488956912287213, 0.6581198452165844, 0.5936375595191643, 0.5242628541997177, 0.30851549349922813, 0.14078687040450472, 0.11281403022013625, 0.06932041807090858, 0.07872481207185325, 0.0857166688515904, 0.055115155008512176, 0.03878816958215175, -0.001000552382631116, 0.026552358838286612, 0.0008480029416326279, -0.002484329917322732, -0.044128966264648115, -0.010060702040338997, -0.024710298662461598, 0.0622144878159693]
gmm2=[0.8982831724997824, 0.3483059612080228, 0.21830921128719732, 0.11770068826847971, 0.09637306420008203, 0.05293166599425529, 0.006991895713695925, 0.026629994419322418, 0.014633933275176952, -0.009494564629925383, 0.00818192346701673, 0.00773378729416301, -0.02391116141428005, -0.005465589504590305, 0.010897125646031259, 0.0021452788926964762, -0.01200881412551919, 0.013372153984878177, -0.02537725038066549, -0.00909673894829367, 0.010708882456251586]

infomap=[0.8982831724997824, 0.47278579300908286, 0.8063409706091433, 0.7427219485024434, 0.7043621789774661, 0.6593177501911391, 0.6056131865325529, 0.5609741264847079, 0.5114697984520538, 0.46052553187866563, 0.3745395651594999, 0.389481185501853, 0.33435806966987647, 0.34176816234988916, 0.3661963347532981, 0.3414172419670701, 0.3415372771117402, 0.35256421573195196, 0.3492322649100947, 0.3538199867684351, 0.34350354866522226]

embedding=[-0.028043749467207602, -0.0775664574941112, -0.011651649269061887, -0.011344825872071727, -0.05951533199268241, -0.07599875369575894, -0.008803016870557826, -0.012926354932375933, -0.022022655356529017, 0.05117922914199384, 0.17417466556329575, 0.3737772777779938, 0.45514274824742484, 0.5336300992150541, 0.5881868300814399, 0.6382152841022916, 0.6946937814207129, 0.7475430661498663, 0.7875005218347628, 0.8524725948617209, 0.8982831724997824] 
embedding.reverse()

# change to community strength, it should reverse the lists

mcp.reverse()
pkwik.reverse()
weilouvain.reverse()
embedding.reverse()
gmm2.reverse()
acp.reverse()
bayes.reverse()
infomap.reverse()


list_.reverse()
print(list_,len(list_))
print(mcp,len(mcp))
#data = [mcp, pkwik, weilouvain, embedding, gmm2, acp, bayes, infomap]
data= [ mcp, acp, pkwik, bayes, embedding, weilouvain, gmm2, infomap]
colors = get_cmap('tab10').colors #colors=['k', 'limegreen', 'saddlebrown', 'royalblue','cyan','tomato','gold','magenta']
markers = ['o', 's', 'D', '^', 'v', '<', '>', 'p', '*']
linestyles = ['--', '--', '-.', ':', '--', '--', '-.', ':', '--']
labels = ['MCP', 'ACP','Pkwikcluster', 'Bayes','URGE','Louvain', 
          'GMM', 'Infomap']

plt.figure(figsize=(10, 6))
for i in range(len(data)):
    x = list_ if i == 0 else list2  
    plt.plot(
        x, data[i],
        color=colors[i % len(colors)],
        marker=markers[i],
        linestyle=linestyles[i % len(linestyles)],
        #markerfacecolor='white',   # hollow markers for B/W clarity
        markeredgewidth=1.2,
        markeredgecolor=colors[i % len(colors)],
        label=labels[i]
    )




plt.tight_layout()
plt.grid(True, which='both', linestyle='--', linewidth=0.5, alpha=0.5)
plt.minorticks_on() 

plt.legend()
plt.xlabel('community strength')
plt.ylabel('expected modularity')
#plt.savefig('fig//ex_mod_ratio_combination.pdf',bbox_inches='tight', pad_inches=0.1)

###############################

# Figure 12: AMI score according to the community strengths

from matplotlib.cm import get_cmap
import matplotlib.pyplot as plt
nmi_x=[0,0.05, 0.1, 0.15, 0.2, 0.25, 0.3, 0.35, 0.4, 0.45, 0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 0.95, 1]

nmi_mcp=[0.9613324313645352, 0.5461306634744696, 0.4375884934369377, 0.25821841694253034, 0.12106035934851649, 0.1150026054632713, 0.08620491856627874, 0.03443572200636579, 0.02468982291206612, -0.009082892753642617, 0.0004293536207536642, -0.005328322656227304, -8.945277064447202e-16, -0.0002132707551361818, -8.945277064447202e-16, 0.0004293536207536642, -0.000330807114082036, 0.0004293536207536642, -0.0003617320240484585, 0.0027264536495346403, 0.0]
nmi_pkwik=[0.6927599174758743, 0.6418520747098391, 0.5948025595756068, 0.5429086796823553, 0.5110574623423941, 0.48215811469379577, 0.4280923139124937, 0.3597233147874416, 0.3589992413294013, 0.2632573802587769, 0.2497193753506135, 0.24981947763232246, 0.16758195987944374, 0.17610341986638148, 0.12243691311698765, 0.06719495432604845, 0.06652895451341115, 0.024337100920964944, -0.011268678182474932, -0.03405792613724601, -0.04444865997339692]

nmi_embedding=[1.0, 1.0, 1.0, 1.0, 1.0, 0.981710906546789, 0.9088132136380453, 0.8980084886155311, 0.7787840560301412, 0.6874827867969436, 0.43948625265711594, 0.2631736298497786, 0.1546258881208283, 0.069518611326729, 0.0839929611400917, -0.014098648074659232, 0.04920195455212739, 0.014699886533553507, 0.013466170657391892, 0.02319323025095213, 0.010507137837687705]

nmi_weilouvain=[1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.9631572576457839, 0.9082011944715004, 0.7787325421522227, 0.7081168600674528, 0.5670233065467669, 0.494801181751617, 0.35127200770142214, 0.1997315117388178, 0.18586475886269072, 0.12238894219590866, 0.03021594754908593, 0.06336112742256758, 0.008085014547730598, -0.01341703262880783, -0.05721889310679348]
nmi_acp=[0.9613324313645352, 0.530039438425258, 0.5109761238233109, 0.29079553290291626, 0.17147597331836412, 0.12118908312872011, 0.13045332565109566, 0.03709841357168668, 0.054694163486532395, 0.016943256419474396, 0.021229895838618756, 0.03994950412492894, -8.723841631972367e-05, -0.0008879027256819338, -0.0002616164789446521, 0.00934558902539147, -0.0005230785440050592, -8.723841631972367e-05, -8.723841631972367e-05, 0.0008723841631830271, -0.0023754993920534905]
nmi_gmm=[1.0, 0.5140308353715524, 0.32081443533252496, 0.17512429533638635, 0.06001539389951495, 0.19980916228003104, 0.01694070557180333, 0.07612539764239969, 0.06349133638572713, 0.04048060391697711, 0.028306033654183667, 0.08560478087312105, -0.05834693842279292, 0.055745992106002756, 0.0289687553379409, -0.007576858531402467, 0.007251247508084811, -0.012134239297809055, -0.008642200927506519, 0.060419859616799, 0.030078591902919907]
nmi_bayes=[0.7874918556828007, 0.821945632426033, 0.814129849522763, 0.7508396073361936, 0.6948386066935894, 0.3924252260122665, 0.3271270618051249, 0.2637707860455903, 0.20781353897654703, 0.13462393857477456, 0.15642674644938384, 0.07807324668827449, 0.09889143126315084, 0.059837297326760075, 0.04363252529502272, 0.041881888652641384, 0.04385147971493565, 0.041748627180257895, 0.04009953066040156, 0.02546593287741742, 0.004570369478795335]
nmi_infomap=[1.0, 1.0, 1.0, 1.0, 0.9613324313645352, 1.0, 0.981710906546789, 0.8697434392290316, 0.783466055630396, 0.7800839015672726, 0.5197887503488567, 0.43317602631833924, 0.26173363573863456, 0.1879633451873207, 0.19789242877080077, 0.0, 0.0, 0.06797704442506829, -0.00195434456047094, -0.005261505499186138, -0.0511379762056503]
nmi_gmm2=[1.0, 0.5997847103363954, 0.45049982510056485, 0.30179687308341824, 0.1546094222864231, 0.1643261941110234, 0.14942255157540746, 0.08468907377327896, 0.07286322485241851, 0.059513537748699094, 0.015160182337066347, 0.0262681039523489, 0.02297045507354912, 0.03149245560926181, 0.0005209683080690947, 0.06331268757770131, 0.024879747107954365, 0.018965435687312272, 0.001350997399885146, 0.005899693616619452, 0.03236658178205846]

nmi_mcp.reverse()
nmi_pkwik.reverse()
nmi_weilouvain.reverse()
nmi_embedding.reverse()
nmi_gmm2.reverse()
nmi_acp.reverse()
nmi_bayes.reverse()
nmi_infomap.reverse()

data= [ nmi_mcp, nmi_acp, nmi_pkwik, nmi_bayes, nmi_embedding, nmi_weilouvain, nmi_gmm2, nmi_infomap]
colors = get_cmap('tab10').colors #colors=['k', 'limegreen', 'saddlebrown', 'royalblue','cyan','tomato','gold','magenta']
markers = ['o', 's', 'D', '^', 'v', '<', '>', 'p', '*']
linestyles = ['--', '--', '-.', ':', '--', '--', '-.', ':', '--']
labels = ['MCP', 'ACP','Pkwikcluster', 'Bayes','URGE','Louvain', 
          'GMM', 'Infomap']

plt.figure(figsize=(10, 6))
for i in range(len(data)):
    x = nmi_x #list_ if i == 0 else list2  
    plt.plot(
        x, data[i],
        color=colors[i % len(colors)],
        marker=markers[i],
        linestyle=linestyles[i % len(linestyles)],
        #markerfacecolor='white',   # hollow markers for B/W clarity
        markeredgewidth=1.2,
        markeredgecolor=colors[i % len(colors)],
        label=labels[i]
    )
plt.tight_layout()
plt.grid(True, which='both', linestyle='--', linewidth=0.5, alpha=0.5)
plt.legend()
plt.xlabel('community stregth')
plt.ylabel('AMI')
plt.savefig('fig//combination_ami_ratio.pdf',bbox_inches='tight', pad_inches=0.1)
